Status :  Fini 31 Mars 2021


3/6 Notre Premier Serveur :
À partir de 00 Minute 00 Seconde
- Créer un fichier server de type js
- Faire un console log pour vérifie si tout fonctionne.
- l'execute dans le terminal
- mettre un require http
- ensuite appeler le create server
- stocker la ligne de création de httpserver dans une variable nommé server (instaciation)
- demarer le serveur avec on il prendra en paramètre une resquest et une function
- mettre deux paramètres dans la fonction un nommé request et une autre nommé reponse
- cette fonction fait une log qui affiche une phrase qu'il y a eu une requête
- et le faire ecouter sur le port 80 pour voir si sa marche
- Ensuite le faire ecouter sur le port 8080
- remplacer le console par reponse write head et on lui met 200 en paramètre
- ajouter reponse end on affichera 'Salut comment ça va ?'
- apres l'entete de type 200 on lui dis le type de contenu que l'on souhaite afficher
- le content type est de type text/html et mettre le charset à utf8
- Appeler la fonction anonymes à la création du serveur
- et lui faire directement ecouter sur le port 8080

À partir 10 Minutes 20 Secondes

- Créer un fichier index.html
- remettre les declarations au propre
- inclure le module fs;
- dans la fonction anonyme utiliser un fs read file
- qui prend en paramètre le chemin vers le index html en str
- suivi par une callback qui prends en paramètre err et data
- faire une condition qui verifie si err est true envoie une exception avec throw
- copier coller writeHead et reponse end dans le callback
- reponse end prend en paramètre data
- faire une erreur dans l'écriture de index.html pour voir ce que le throw fait
- remplacer le throw error du if par un response writeHead qui prend en paramètre 404
et faire un response end 'ce fichier n'existe pas'
- faire un else et mettre dedans les ligne de quand tout marche
- regarder sur le navigateur le type de l'erreur en allant dans network et activer all
- supprimer les ligne du callback de server on
- ajouter une ligne reponse writeHead qui prend 200
- une ligne response end qui affiche bonjour
- ajouter aprés l'url '?name=john'
- faire un console log de l'url du request
- faire un require de url nommé url
- parse url avec url parse qui prend en paramètre url request
- ajouter une deuxième paramètre de type bool et le mettre a true
- stocker les information du console log dans une variable nommé query
- et biensure on recupérer la propiété query et url parse
- ensuite faire un bonjour avec le nom de parse
- essayer de remplacer john var doe et marc et voir si sa marche toujours
- si on met rien sa met undefined donc on met une condition qui fait un response write bonjour
ou bonjour avec nom si le nom est egal ou pas a undefined.
- faire cette condition avec response end uniquement !
- dans index html remplace le text du h1 par bienvenue suivie d'une interploration qui prend name
en paramètre
-  refaire les etapes de l'ecriture de fichier (Voir reponse si besoin)
- creer une variable name qui verifie si le name de query est égal a undefined name sera égal anonyme
sinon name est egal au nom du query
- remplacer le name de h1 par le name du fichier js avec un data replace
- dans les paramètre de readFile ajouter un paramètre avec le callback nommé 'utf-8'
- tester si tout marche avec anonyme
- supprimer toutes lignes ! 
- instaciation avec require de events nommé  EvenEmitter
- instaciation une nouvelle EvenEmitter elle sera nommé monEcouteur
- creer un évenement avec monEcouteur nommé saute qui prends en paramètre
une fonction qui fait un console log de 'j'ai sauté'
- ensuite faire emettre l'evenement saute a monEcouteur
- ajouter deux paramètre à la fonction de saute a et b
- ensuite mettre 10 pour a et 20 pour b lorsque l'on emettes l'ecouteur saute
- faire en sorte qu'il soit emit qu'une seule fois
- creer une variable nommé app qui fait appel la methode static/constructeur
 start App
- le demarer app il prend en paramètre une string root
une fonction qui elle même prend en paramètre response et cette fonction
écris une response qui fait un write 'je suis à la racine'
- créer un objet nommé App 
- mettre une fonction dans la méthode start de App
- dans la fonction de start instacier une méthode listener qui 
est de type EvenEmitter
- ensuite retourné listener
- avant le return creer une variable server qui est une instaciation
de create server 
- qui prends directement dans une fonction request et response
- et il ecoutera sur le port la variable port qui sera dans le paramètre
de la fonction start
- dans la fonction de server faire une condition qui verifie si l'url
est à la racine '/' alors on emet l'evenement
- on remplace le mot listener par emitter 
- dans la condition emttre l'evenement root et on lui passe en paramètre 
la reponse
puis on fait un end la reponse hors de la condition et toujours envoyer
une entete de type 200